{"version":3,"sources":["http-common.js","services/TutorialService.js","components/AddTutorial.js","components/Tutorial.js","components/TutorialsList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","headers","TutorialService","getAll","http","get","id","data","post","update","put","remove","delete","removeAll","AddTutorial","initialTutorialState","title","description","useState","tutorial","setTutorial","submitted","setSubmitted","handleInputChange","event","target","name","value","className","onClick","htmlFor","type","required","onChange","TutorialDataService","then","response","catch","e","console","log","Tutorial","props","useParams","navigate","useNavigate","currentTutorial","setCurrentTutorial","message","setMessage","useEffect","getTutorial","TutorialsList","tutorials","setTutorials","currentIndex","setCurrentIndex","retrieveTutorials","map","index","setActiveTutorial","to","App","href","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8da35677.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  //baseURL: 'https://api.example.com',\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"https://reactnode-crud-application.herokuapp.com/api/tutorials\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`https://reactnode-crud-application.herokuapp.com/api//tutorials/${id}`);\r\n};\r\n\r\nconst create = data => {\r\n  return http.post(\"https://reactnode-crud-application.herokuapp.com/api//tutorials\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`https://reactnode-crud-application.herokuapp.com/api//tutorials/${id}`, data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`https://reactnode-crud-application.herokuapp.com/api//tutorials/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`https://reactnode-crud-application.herokuapp.com/api//tutorials`);\r\n};\r\n\r\n\r\n\r\nconst TutorialService = {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n  \r\n};\r\n\r\nexport default TutorialService;\r\n","import React, { useState } from \"react\";\r\nimport TutorialDataService from \"../services/TutorialService\";\r\n\r\nconst AddTutorial = () => {\r\n  const initialTutorialState = {\r\n    id: null,\r\n    title: \"\",\r\n    description: \"\",\r\n   \r\n  };\r\n  const [tutorial, setTutorial] = useState(initialTutorialState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setTutorial({ ...tutorial, [name]: value });\r\n  };\r\n\r\n  const saveTutorial = () => {\r\n    var data = {\r\n      title: tutorial.title,\r\n      description: tutorial.description\r\n    };\r\n\r\n    TutorialDataService.create(data)\r\n      .then(response => {\r\n        setTutorial({\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n         \r\n        });\r\n        setSubmitted(true);\r\n       \r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newTutorial = () => {\r\n    setTutorial(initialTutorialState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"submit-form\">\r\n      {submitted ? (\r\n        <div>\r\n          <h4>You submitted successfully!</h4>\r\n          <button className=\"btn btn-success\" onClick={newTutorial}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">Title</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"title\"\r\n              required\r\n              value={tutorial.title}\r\n              onChange={handleInputChange}\r\n              name=\"title\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"description\"\r\n              required\r\n              value={tutorial.description}\r\n              onChange={handleInputChange}\r\n              name=\"description\"\r\n            />\r\n          </div>\r\n\r\n          <button onClick={saveTutorial} className=\"btn btn-success\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTutorial;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport TutorialDataService from \"../services/TutorialService\";\r\n\r\nconst Tutorial = props => {\r\n  const { id }= useParams();\r\n  let navigate = useNavigate();\r\n\r\n  const initialTutorialState = {\r\n    id: null,\r\n    title: \"\",\r\n    description: \"\",\r\n    \r\n  };\r\n  const [currentTutorial, setCurrentTutorial] = useState(initialTutorialState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const getTutorial = id => {\r\n    TutorialDataService.get(id)\r\n      .then(response => {\r\n        setCurrentTutorial(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id)\r\n      getTutorial(id);\r\n  }, [id]);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setCurrentTutorial({ ...currentTutorial, [name]: value });\r\n  };\r\n\r\n  const updatePublished = status => {\r\n    var data = {\r\n      id: currentTutorial.id,\r\n      title: currentTutorial.title,\r\n      description: currentTutorial.description,\r\n     \r\n    };\r\n\r\n    TutorialDataService.update(currentTutorial.id, data)\r\n      .then(response => {\r\n        setCurrentTutorial({ ...currentTutorial, published: status });\r\n       \r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const updateTutorial = () => {\r\n    TutorialDataService.update(currentTutorial.id, currentTutorial)\r\n      .then(response => {\r\n        \r\n        setMessage(\"The tutorial was updated successfully!\");\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteTutorial = () => {\r\n    TutorialDataService.remove(currentTutorial.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        navigate(\"/tutorials\");\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentTutorial ? (\r\n        <div className=\"edit-form\">\r\n          <h4>Tutorial</h4>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                value={currentTutorial.title}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                value={currentTutorial.description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n           \r\n          </form>\r\n\r\n          \r\n\r\n          <button className=\"badge badge-danger mr-2\" onClick={deleteTutorial}>\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"badge badge-success\"\r\n            onClick={updateTutorial}\r\n          >\r\n            Update\r\n          </button>\r\n          <p>{message}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tutorial;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TutorialDataService from \"../services/TutorialService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TutorialsList = () => {\r\n  const [tutorials, setTutorials] = useState([]);\r\n  const [currentTutorial, setCurrentTutorial] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  \r\n  useEffect(() => {\r\n    retrieveTutorials();\r\n  }, []);\r\n  const retrieveTutorials = () => {\r\n    TutorialDataService.getAll()\r\n      .then(response => {\r\n        setTutorials(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const refreshList = () => {\r\n    retrieveTutorials();\r\n    setCurrentTutorial(null);\r\n    setCurrentIndex(-1);\r\n  };\r\n\r\n  const setActiveTutorial = (tutorial, index) => {\r\n    setCurrentTutorial(tutorial);\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  const removeAllTutorials = () => {\r\n    TutorialDataService.removeAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"list row\">\r\n      <div className=\"col-md-8\">\r\n       \r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Tutorials</h4>\r\n\r\n        <ul className=\"list-group\">\r\n          {tutorials &&\r\n            tutorials.map((tutorial, index) => (\r\n              <li\r\n                className={\r\n                  \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\r\n                }\r\n                onClick={() => setActiveTutorial(tutorial, index)}\r\n                key={index}\r\n              >\r\n                {tutorial.title}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n\r\n        <button\r\n          className=\"m-3 btn btn-sm btn-danger\"\r\n          onClick={removeAllTutorials}\r\n        >\r\n          Remove All\r\n        </button>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        {currentTutorial ? (\r\n          <div>\r\n            <h4>Tutorial</h4>\r\n            <div>\r\n              <label>\r\n                <strong>Title:</strong>\r\n              </label>{\" \"}\r\n              {currentTutorial.title}\r\n            </div>\r\n            <div>\r\n              <label>\r\n                <strong>Description:</strong>\r\n              </label>{\" \"}\r\n              {currentTutorial.description}\r\n            </div>          \r\n\r\n            <Link\r\n              to={\"/tutorials/\" + currentTutorial.id}\r\n              className=\"badge badge-warning\"\r\n            >\r\n              Edit\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Tutorial...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TutorialsList;\r\n","import React from \"react\";\r\nimport { Routes, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport AddTutorial from \"./components/AddTutorial\";\r\nimport Tutorial from \"./components/Tutorial\";\r\nimport TutorialsList from \"./components/TutorialsList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a href=\"/tutorials\" className=\"navbar-brand\"></a>\r\n        <div className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/tutorials\"} className=\"nav-link\">\r\n              Tutorials\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/add\"} className=\"nav-link\">\r\n              Add\r\n            </Link>\r\n          </li>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"container mt-3\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<TutorialsList/>} />\r\n          <Route path=\"/tutorials\" element={<TutorialsList/>} />\r\n          <Route path=\"/add\" element={<AddTutorial/>} />\r\n          <Route path=\"/tutorials/:id\" element={<Tutorial/>} />\r\n        </Routes>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}